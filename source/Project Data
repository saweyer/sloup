// Sloup 2.2// © S. Weyer 1994-2001// fix Output to be async w/ callback??constant kSloup 	 := "Sloup";constant kSlurpee 	 := "Slurpee";constant kVersionNum := "2.2";constant kVersionInt := 22;constant kBetaVersion:= "i";/*- autoconn should display "command" or "kbd"- Notes {} DUMP! prints list of labels- removed register button- 2.x. progress box for installing packages- 115K, 234K speeds added (may not really work)- nameSep added to dumpPrefs (adds path name with separator before value)*/DeclareGlobalFn('DeclareGlobalFn, 2);DeclareGlobalFn('DefineGlobalConstant,2);DeclareGlobalFn('IsGlobalConstant,1);if not IsGlobalConstant('kBuild20)then DefineGlobalConstant('kBuild20,	// '|Newton 2.0| or '|Newton 2.1|		BeginsWith(SprintObject(platformVersion.platformFile), "Newton"));if not IsGlobalConstant('kBuild1x)then DefineGlobalConstant('kBuild1x, not kBuild20);DefineGlobalConstant('kAll, true); // !!!f. not kIgnoreNativeKeyword or kBuild20); // currently, if native then add extra stuffconstant kNewEndPoint := kBuild20;	// !!!a//DefineGlobalConstant('kAddEncoding,	(NIL or language='Japanese or language='Chinese) and kNewEndPoint); // !!!aconstant kDefaultEncoding	:= 'sjis; //'|string.sjis|;DefineGlobalConstant('kVersionString,	kVersionNum & kBetaVersion &	(if kDebugOn then $D) &	(if kProfileOn then $P) &	(if not kIgnoreNativeKeyword then $N) &	(if kBuild20 then "-2") &	(if language<>'english then $~ & Upcase(SPrintObject(language))[0])	// else if kAddEncoding then "~E"));DefineGlobalConstant('kVersion, kSloup && kVersionString);Print("slrp" & kVersionInt & kBetaVersion &	(if not kIgnoreNativeKeyword then $N	else if kBuild20	then if language='English		then $2		else Upcase(SPrintObject(language))[0]	)	& ".pkg");Print(kVersion && DateNTime(Time()));Print(kAppSymbol);SetLocalizationFrame({ // use with LocObj(defaultStr, 'symbol)English: {descText:			kSloup && "transfers text and tab-delimiteddata between soups and a desktopterminal program.Shareware",waitSoupName:		"Waiting for soup name",waitEntrySpec:		"Waiting for entrySpec",waitEntries:		"Waiting for entries",AboutItem:			"About",HelpItem:			"Help",PrefsItem:			"Prefs",ChooseMsg:			"Choose",connectLabel:		"Connect",connected:			"connected",connecting:			"connecting",binding:			"binding",		// !!!adisconnectLabel:	"Disconnect",disconnected:		"Disconnected",disconnecting:		"disconnecting",instantiateEP:		"Instantiating",instantiateErr:		"Instantiate Error",connectErr:			"Connect Error",bindErr:			"Bind Error",	// !!!aacceptErr:			"Accept Error",DumpEntries:		"Dumping entries from",DumpPrefErr:		"dump prefs error",Pausing:			"Pausing ^0 seconds…Get ready to receive",removingPackage:	"removing package",installingPackage:	"installing package",fixingPkg:			"fixing package",errorMsg:			"error",notSoupIndex:		"not a soupname/index",addingIndexes:		"adding indexes",paragraphMsg:		"paragraph",compileMsg:			"compile",evaluateMsg:		"evaluate",notFrameErr:		"not a frame",invalidEntrySpec:	"Entry spec invalid",sloupSetDone:		kSloup && "settings done",screenSmaller:		"Screen smaller than",eraseEntries:		"Erasing (^0) entries in ^1",allFolders:			"All",unfiledFolder:		"Unfiled",untitledLabel:		"untitled",		// e.g., Newtworks doc nameinspectLabel:		"Inspect",pasteLabel:			"Paste",statusLabel:		"Status",storeLabel:			"Store",		// e.g., card for dumping soup namessoupLabel:			"Soup",entryLabel:			"Entry",entriesLabel:		"Entries",indexLabel:			"Indexes",soundLabel:			"Sound",noItem:				"none",autoConnLabel:		"AutoConnect",refreshLabel:		"Refresh",encodingItem:		"Encoding",serial9600:			"9600",serial19200:		"19200",serial38400:		"38400",serial57600:		"57600",ADSPlabel:			"ADSP",ADSPslabel:			"ADSPs",serialMNP:			"MNP",slowIRitem:			"slowIR",			// i.e., old/SharpserialIRitem:		"serialIR",IrDAitem:			"IrDA",},// -----German: {	// Reinhold Schoeb <schoeba@str.daimler-benz.com>descText:	kSloup && "sendet Text und TAB-begrenzteDaten zwischen Soups und einemDesktop-Terminal-Programm.Shareware",//"Sloup transfers text and tab-delimited data between soups and a desktop terminal program. Shareware"waitSoupName:		"Warte auf Soup Name",					//"Waiting for soup name"waitEntrySpec:		"Warte auf Eintrag-Spez.",				//"Waiting for entrySpec"waitEntries:		"Warte auf Einträge",					//"Waiting for entries"AboutItem:			"Über",									//"About"HelpItem:			"Help",	// ???							//"Help"PrefsItem:			"Einst.",								//"Prefs"ChooseMsg:			"Auswahl",								//"Choose"connectLabel:		"Verbinden",							//"Connect"connected:			"Verbunden",							//"connected"connecting:			"verbinde",								//"connecting"binding:			"verbinde",								//"binding"disconnectLabel:	"Unterbreche",							//"Disconnect"disconnected:		"Unterbrochen",							//"Disconnected"disconnecting:		"unterbreche",							//"disconnecting"instantiateEP:		"Sofortiger Schluß",					//"Instantiating"instantiateErr:		"Sofortiger Fehler",					//"Instantiate Error"connectErr:			"Verbindungsfehler",					//"Connect Error"bindErr:			"Verbindungsfehler",					//"Bind Error"acceptErr:			"Accept Error",DumpEntries:		"Lese Einträge von",					//"Dumping entries from"DumpPrefErr:		"Fehler: Lese Einst.",					//"dump prefs error"Pausing:			"Warte ^0 Sekunden…Starte Empfänger",	//"Pausing ^0 seconds…Get ready to receive"removingPackage:	"lösche Package",						//"removing package"installingPackage:	"installiere Package",					//"installing package"fixingPkg:			"Fixiere Package",						//"fixing package",errorMsg:			"Fehler",								//"error"notSoupIndex:		"kein Soup-Name/Index",					//"not a soupname/index"addingIndexes:		"füge Indexe zu",						//"adding indexes"paragraphMsg:		"Absatz",								//"paragraph"compileMsg:			"übersetze",							//"compile"evaluateMsg:		"bewerte",								//"evaluate"notFrameErr:		"kein Rahmen",							//"not a frame"invalidEntrySpec:	"Eintrag-Spez. ungültig",				//"Entry spec invalid"sloupSetDone:		kSloup && "Einst. erfolgt",				//"Sloup settings done"screenSmaller:		"Bildschirm kleiner als",				//"Screen smaller than"eraseEntries:		"Lösche (^0) Einträge in ^1",			//"Erasing (^0) entries in ^1"allFolders:			"Alle",									//"All"unfiledFolder:		"Nicht abgelegt",						//"Unfiled"untitledLabel:		"untitled",		// e.g., Newtworks doc nameinspectLabel:		"Kontr.",								//"Inspect"pasteLabel:			"Senden",								//"Paste" (was "Einfügen")statusLabel:		"Status",storeLabel:			"Store",		// e.g., card for dumping soup namessoupLabel:			"Soup",entryLabel:			"Eintrag",								//"Entry"entriesLabel:		"Einträge",								//"Entries"indexLabel:			"Indexe",								//"Indexes"soundLabel:			"Ton",									//"Sound"noItem:				"ohne",									//"none"autoConnLabel:		"Autom. Verb.",							//"AutoConnect"refreshLabel:		"Refresh",encodingItem:		"Encoding",serial9600:			"9600",serial19200:		"19200",serial38400:		"38400",serial57600:		"57600",ADSPlabel:			"ADSP",ADSPslabel:			"ADSPs",serialMNP:			"MNP",slowIRitem:			"slowIR",			// i.e., old/SharpserialIRitem:		"serialIR",IrDAitem:			"IrDA",},// -----Japanese: {descText:			kSloup && "transfers text and tab-delimiteddata between soups and a desktopterminal program.Shareware",waitSoupName:		"Waiting for soup name",waitEntrySpec:		"Waiting for entrySpec",waitEntries:		"Waiting for entries",AboutItem:			"About",HelpItem:			"\u30D830EB30D7\u",	//"Help",PrefsItem:			"\u8A2D5B9A\u",		//"Prefs",ChooseMsg:			"\u9078629E\u",		//"Choose",connectLabel:		"\u63A57D9A5148\u",	//"Connect",  'connect to'?connected:			"\u63A57D9A3057307E3057305F\u",	//"connected",connecting:			"\u63A57D9A4E2D\u",	//"connecting",binding:			"\u305730663044307E3059\u",		//"binding" ?disconnectLabel:	"Disconnect",disconnected:		"Disconnected",disconnecting:		"\u520765AD4E2D\u",				//"disconnecting",instantiateEP:		"\u63A57D9A6E9650994E2D\u",		//"Instantiating",instantiateErr:		"\u63A57D9A6E965099306B593165573057307E3057305F\u",	//"Instantiate Error",connectErr:			"\u63A57D9A306B593165573057307E3057305F\u",	//"Connect Error",bindErr:			"Bind Error",acceptErr:			"Accept Error",DumpEntries:		"Dumping entries from",DumpPrefErr:		"dump prefs error",Pausing:			"Pausing ^0 seconds…Get ready to receive",removingPackage:	"removing package",installingPackage:	"\u30A430F330B930C830FC30EB4E2D\u",		//"installing package",fixingPkg:			"fixing package",errorMsg:			"\u30A830E930FC\u",						//"error",notSoupIndex:		"not a soupname/index",addingIndexes:		"adding indexes",paragraphMsg:		"paragraph",compileMsg:			"\u30B330F330D130A430EB\u",				//"compile",evaluateMsg:		"\u8A554FA130A830E930FC\u",				//"evaluate",notFrameErr:		"not a frame",invalidEntrySpec:	"Entry spec invalid",sloupSetDone:		kSloup && "settings done",screenSmaller:		"\u753B9762304C5C0F30553059304E307E3059\u",	//"Screen smaller than",eraseEntries:		"Erasing (^0) entries in ^1",allFolders:			"All",unfiledFolder:		"Unfiled",untitledLabel:		"untitled",		// e.g., Newtworks doc nameinspectLabel:		"Inspect",pasteLabel:			"Paste",statusLabel:		"Status",storeLabel:			"Store",		// e.g., card for dumping soup namessoupLabel:			"Soup",entryLabel:			"Entry",entriesLabel:		"Entries",indexLabel:			"Indexes",soundLabel:			"Sound",noItem:				"\u71213057\u",		//"none",autoConnLabel:		"AutoConnect",refreshLabel:		"Refresh",encodingItem:		"\u30A830F330B330FC30C730A330F330B08A2D5B9A\u",	//"Encoding",serial9600:			"9600",serial19200:		"19200",serial38400:		"38400",serial57600:		"57600",ADSPlabel:			"ADSP",ADSPslabel:			"ADSPs",serialMNP:			"MNP",slowIRitem:			"slowIR",			// i.e., old/SharpserialIRitem:		"serialIR",IrDAitem:			"IrDA",},// -----Chinese: {descText:			kSloup && "transfers text and tab-delimiteddata between soups and a desktopterminal program.Shareware",waitSoupName:		"Waiting for soup name",waitEntrySpec:		"Waiting for entrySpec",waitEntries:		"Waiting for entries",AboutItem:			"\u95DC65BC\u",			//"About",HelpItem:			"\u8AAA660E\u",			//"Help",PrefsItem:			"\u8A2D5B9A\u",			//"Prefs",ChooseMsg:			"\u907864C7\u",			//"Choose",connectLabel:		"\u902363A581F3\u",		//"Connect",connected:			"\u5DF2902363A5\u",		//"connected",connecting:			"\u6B635728902363A5\u",	//"connecting",binding:			"binding",disconnectLabel:	"Disconnect",disconnected:		"Disconnected",disconnecting:		"\u89E39664902363A5\u",	//"disconnecting",instantiateEP:		"\u8D7759CB\u",			//"Instantiating",instantiateErr:		"\u8D7759CB932F8AA4\u",	//"Instantiate Error",connectErr:			"\u902363A5932F8AA4\u",	//"Connect Error",bindErr:			"Bind Error",acceptErr:			"Accept Error",DumpEntries:		"Dumping entries from",DumpPrefErr:		"dump prefs error",Pausing:			"Pausing ^0 seconds…Get ready to receive",removingPackage:	"removing package",installingPackage:	"\u6B63572888DD8A2D0020005000610063006B006100670065\u",	//"installing package",fixingPkg:			"fixing package",errorMsg:			"\u932F8AA4\u",			//"error",notSoupIndex:		"not a soupname/index",addingIndexes:		"adding indexes",paragraphMsg:		"paragraph",compileMsg:			"\u7DE88B6F\u",	//"compile",evaluateMsg:		"evaluate",notFrameErr:		"not a frame",invalidEntrySpec:	"Entry spec invalid",sloupSetDone:		kSloup && "settings done",screenSmaller:		"Screen smaller than",eraseEntries:		"Erasing (^0) entries in ^1",allFolders:			"All",unfiledFolder:		"Unfiled",untitledLabel:		"untitled",		// e.g., Newtworks doc nameinspectLabel:		"Inspect",pasteLabel:			"Paste",statusLabel:		"Status",storeLabel:			"Store",		// e.g., card for dumping soup namessoupLabel:			"Soup",entryLabel:			"Entry",entriesLabel:		"Entries",indexLabel:			"Indexes",soundLabel:			"Sound",noItem:				"\u7121\u",		//"none",autoConnLabel:		"AutoConnect",refreshLabel:		"Refresh",encodingItem:		"\u7DE878BC65B95F0F\u",	//"Encoding",serial9600:			"9600",serial19200:		"19200",serial38400:		"38400",serial57600:		"57600",ADSPlabel:			"ADSP",ADSPslabel:			"ADSPs",serialMNP:			"MNP",slowIRitem:			"slowIR",			// i.e., old/SharpserialIRitem:		"serialIR",IrDAitem:			"IrDA",},});if kBuild20then begin	//DefineGlobalConstant('kRegisterCardSoupFunc, kRegisterCardSoupDeprecatedFunc);	//DefineGlobalConstant('kUnRegisterCardSoupFunc, kUnRegisterCardSoupDeprecatedFunc);	//DefineGlobalConstant('kGetUserConfigFunc, kGetUserConfigDeprecatedFunc);	DeclareGlobalFn('Query,2);	endelse begin	DeclareGlobalFn('RegPowerOff,2);	DeclareGlobalFn('UnRegPowerOff,1);	DeclareGlobalFn('GetGlobalFn,1);	DeclareGlobalFn('DefGlobalFn,2);	DeclareGlobalFn('XmitSoupChange,4);	DeclareGlobalFn('IsRichString,1);	DeclareGlobalFn('IsString,1);	DeclareGlobalFn('GetAppPrefs,2);	DeclareGlobalFn('RegUnionSoup,2);	DeclareGlobalFn('UnRegUnionSoup,2);	DeclareGlobalFn('AddDelayedCall,3);	DeclareGlobalFn('GetGlobalVar,1);	DeclareGlobalFn('DefGlobalVar,2);	DeclareGlobalFn('AddDelayedSend,4);	DeclareGlobalFn('GetUserConfig,1);	DeclareGlobalFn('LSearch,5);	DeclareGlobalFn('EntryRemoveFromSoupXmit,2);	DeclareGlobalFn('GetDefaultStore,0);	DeclareGlobalFn('IsInteger,1);	DeclareGlobalFn('EntryChangeXmit, 2);	DeclareGlobalFn('GetPkgRef, 2);	DeclareGlobalFn('GetPackageNames, 1);	DeclareGlobalFn('SubstituteChars, 3);	end;DeclareGlobalFn('CharPos,3);DeclareGlobalFn('ClearVBOCache,1);DeclareGlobalFn('SoundList,0);DeclareGlobalFn('GetRegisteredSound,1);//if kAddEncoding thenDeclareGlobalFn('OpenPrefsTo, 1);DefineGlobalConstant('kMyRegCardSoup, func(soupName,soupIndexes,appSymbol,appObject)if kBuild20 or Functions.RegUnionSoup existsthen RegUnionSoup(appSymbol,		{name: 	 	soupName,		userName: 	soupName,		ownerApp:	kAppSymbol, // note: to match UnRegUnionSoup		userDescr:	soupName && appObject[1],		indexes: 	soupIndexes,		})else call kRegisterCardSoupFunc with (soupName,soupIndexes,appSymbol,appObject));DefineGlobalConstant('kMyUnRegCardSoup, func(soupName, delay)if kBuild20 or Functions.UnRegUnionSoup existsthen begin	UnRegUnionSoup(soupName,kAppSymbol);	if delay	then AddDelayedCall(GetGlobalFn('XmitSoupChange),       		[soupName, kAppSymbol, 'whatThe, NIL], delay);	endelse begin	call kUnregisterCardSoupFunc with (soupName);	if delay	then AddDelayedAction(Functions.BroadcastSoupChange,       		[soupName], delay)	end);DefineGlobalConstant('kDescText, LocObj("Sloup transfers text and tab-delimiteddata between soups and a desktopterminal program.Shareware", 'descText));DefineGlobalConstant('kAboutText, kDescText &&"\u00A9\u 1994-2001, S. Weyer.Steve Weyer17 Timber Knoll Dr.Washington Crossing, PA 18977-1052Internet: <A HREF=\"mailto:weyer@kagi.com\">weyer@kagi.com</A>AOL: SteveWeyer<A HREF=\"http://www.kagi.com/weyer/\">http://www.kagi.com/weyer/</A>");constant kDragRadius	:= 4;constant sysSoupName	:= ROM_systemsoupname;constant noteSoupName	:= ROM_paperrollsoupname;constant kPaperRollSym	:= 'paperRoll;constant cardSoupName	:= ROM_cardfilesoupname;constant kPackage		:= "Package";constant endOfPara		:= "-----";constant noteHeight		:= 265;//constant noteWidth	:= 226;constant noteLeft		:= 10;constant noteTop		:= 2;constant tab			:= "\t";constant cr				:= "\n";constant unicodeStart	:= "\\u";constant eString		:= "";constant lf				:= "\u000A";constant kClassString	:= "class:string";constant kHex			:= "0123456789ABCDEF";DefineGlobalConstant('kDefaultIndex, {type: 'index});DefineGlobalConstant('zeroChar, Ord($0));DefineGlobalConstant('crlf,		unicodeCR&unicodeLF);constant kADSPitem  	:= 4;constant kMNPitem		:= 5;	// !!!aconstant kSlowIRitem	:= 6;	// !!!aconstant kSerialIRitem	:= 7;	// !!!aconstant kIrDAitem  	:= 8;	// !!!aconstant k115KItem		:= 9;	// !!!iconstant k230KItem		:=10;	// !!!i// generate via call kGetCommPortInfoFunc with () ???// offer control panel like in ClarisTerm??DefineGlobalConstant('kConnLabels, [	// !!!a// these must correspond to bpsOptions (and see constants above)LocObj("9600", 'serial9600),LocObj("19200", 'serial19200),LocObj("38400", 'serial38400),LocObj("57600", 'serial57600),LocObj("ADSP", 'ADSPlabel),LocObj("MNP", 'serialMNP),LocObj("slowIR", 'slowIRitem),LocObj("serialIR", 'serialIRitem),LocObj("IrDA", 'IrDAitem),"115200",	// LocObj???		// !!!i. see bpsOptions, getConfigOptions, kItemLen"230400",//modem, ...?]);DefineGlobalConstant('kItemLen,	(if kBuild20 then k230KItem else if kAll then kSlowIRitem else 0) + 1);SetLength(kConnLabels, kItemLen);DefineGlobalConstant('kWaitingSoup,		LocObj("Waiting for soup name", 'waitSoupName));DefineGlobalConstant('kWaitingEntrySpec,LocObj("Waiting for entrySpec", 'waitEntrySpec));DefineGlobalConstant('kWaitingEntries,	LocObj("Waiting for entries",	'waitEntries));constant kBinaryStart	:= "!";constant kDecimal		:= ".";constant kColon			:= ":";constant kPara			:= "para";constant kBits			:= "bits";constant kBitmap		:= "bitmap";constant kPicture		:= "picture";constant kResource		:= "resource";constant kSamples		:= "samples";constant kSound			:= "sound";constant kBinaryPrefix	:= "binary:";constant kLongStr		:= "longString";DefineGlobalConstant('kExcl, kBinaryStart);DefineGlobalConstant('kBinaryTypes, [kBitmap, kBits, kPicture, kSamples, kSound, kResource]);constant kBitmapHeadLen	:= 16;constant kBYE			:= "BYE!";constant kReplace		:= "REPLACE!";constant kDump			:= "DUMP!";constant kErase			:= "ERASE!";constant kEval			:= "EVAL!";constant kAbortDelay	:= 2000;constant kOutputDelay	:= 6;	// 1/10 sec. for IR, ADSP?DefineGlobalConstant('kConnect,			LocObj("Connect",		'connectLabel));DefineGlobalConstant('kConnected,		LocObj("connected",		'connected));DefineGlobalConstant('kDisconnect,		LocObj("Disconnect",	'disconnectLabel));DefineGlobalConstant('kDisconnected,	LocObj("Disconnected",	'disconnected));DefineGlobalConstant('kDisconnecting,	LocObj("disconnecting",	'disconnecting));DefineGlobalConstant('kError,			LocObj("error",			'errorMsg) & $:);DefineGlobalConstant('kerrSound, 	ROM_plinkbeep);DefineGlobalConstant('keraseSound, 	ROM_poof);DefineGlobalConstant('kevalSound, 	ROM_plunk);DefineGlobalConstant('kClear, 		unicodeESC);	// $\1B. Clear key (same as ESC?)DefineGlobalConstant('kEvalChar,	unicodeSUB);	// $1A (ctrl-Z)DefineGlobalConstant('kEnter, 		unicodeETX);	// $\03.  Enter keyDefineGlobalConstant('kClose, 		unicodeETB);	// $\17. close window (ctrl-W?) ***DefineGlobalConstant('kScrollUp,   	unicodeRS);		// $\1E  scroll up   (ctrl-^)DefineGlobalConstant('kScrollDown, 	unicodeUS);		// $\1F. scroll down (ctrl-v)constant kStoreID := "storeID";	// !!!hconstant kInspHeight	:=  42;	// was 40,36. top of statusLabelconstant kAppHeight		:= 172; // full heightconstant kInspWidth		:=  58;	// was 56. left edge of sloupTitleconstant kAppWidth		:= 208;constant kRegistrationPackage := '|Register:FlaSheridn|;constant kSharewareFee := 10;DefineGlobalConstant('kRegFrame, {	package: kAppSymbol, 	price: 	 kSharewareFee,	platform: 'Newton, 	Version: kVersionString,	});DefineGlobalConstant('kMySPrintObject, func(s)if (if kBuild20 then IsString(s) else isInstance(s,'string))then Clone(s) // fix >1K bugelse SPrintObject(s));DefineGlobalConstant('kOutputStr, func(strm, str)if strmthen strm:Output(str, nil)else Write(str));DefineGlobalConstant('kLabelEqual, func(elabel1, elabel2)	// elabel1=entrySpec.labels, elabel2=entry.labelselabel1 = elabel2 or(isArray(elabel2) and	// SuperNotepad	if elabel1	then SetContains(elabel2, elabel1)	else Length(elabel2)=0));if not IsGlobalConstant('kVBOFlush) thenDefineGlobalConstant('kVBOFlush, 24*1024);	// every 24K or so? ( < 32K?)DefineGlobalConstant('kNewtworksSoupName,	"NewtWorks");DefineGlobalConstant('kNewtworksSym,		'Newtworks);// same as kNewVBO in Newt's CapeDefineGlobalConstant('kNewVBO, func(store, cl, dlen)	// the recommended initializationbegin	gc();	local data := if not IsInteger(dlen) then dlen;		// string or binary obj	local vbo :=		(if store then store else GetDefaultStore()):NewCompressedVBO(			if cl then cl else 'string,			// cl == binary			if data then Length(data) else dlen,// length of string or binary or #			kTextCompander, 					// kBitmapCompander unreliable for bin?			nil);/*	if data	then begin		BinaryMunger(vbo, 0, nil, data, 0, nil);		if Length(data) > 2		then ClearVBOCache(vbo);		end;*/	vbo;end);constant kRejectChars := "\u2206\u"; // graphic indicatorDefineGlobalConstant('kFixCR, func(ep, str)	// !!!g. unicode(encoding) safeif kBuild20 and isFrame(ep) and ep.NTEncodingthen begin	local i := 0;	while (i := CharPos(str, unicodeCR, i))	do begin		StrMunger(str,i,1, crlf,0,2);		i := i+2;		end;	endelse StrReplace(str, cr, crlf, nil));DefineGlobalConstant('kOutputNewtWorksRange, func(textView, range, commEndPt) // dumpNoteStringbegin // QA: Extracting All Text from a ProtoTXView Object	constant kChunkSize := 0x1000; // 4K    local INT i, start := if range then range.first else 0, nextFlush := kVBOFlush, slen := 0;    local INT last := if range then range.last else textView:GetCountCharacters(); 	local cstr, str;  	if last-start < kChunkSize	// !!!c. 'small' range (don't bother with VBO) 	then begin 		cstr := StringFilter( // strip out graphics characters					textView:GetRangeData({first: start, last: last}, 'text),					kRejectChars, 'rejectAll) & unicodeCR; 		if commEndPt 		then begin 			call kFixCR with (commEndPt, cstr);	// !!!g. StrReplace(cstr, cr, crlf, nil) 			call kOutputStr with (commEndPt, cstr); 			end; 		return cstr; 		end;     if not commEndPt    then str := call kNewVBO with (nil, nil, ""); // !!!c	for i := start to last by kChunkSize    do begin		cstr := StringFilter( // strip out graphics characters				textView:GetRangeData(					{first: i, 					last: min(last, i + kChunkSize),					}, 'text),				kRejectChars, 'rejectAll);		if commEndPt		then begin			call kFixCR with (commEndPt, cstr); 	// !!!g			call kOutputStr with (commEndPt, cstr);			end		else begin // !!!c			StrMunger(str, slen, 0,	cstr, 0, nil);			slen := slen + StrLen(cstr);			if (slen*2) >= nextFlush			then begin				ClearVBOCache(str);				nextFlush := nextFlush + kVBOFlush;				end;			end;		end;	// !!!c. add final cr	if commEndPt	then call kOutputStr with (commEndPt, crlf)	else begin		StrMunger(str,slen,0, crlf,0,1);		ClearVBOCache(str);		str;		end;end);DefineGlobalConstant('kDummyTx, {		// dumpNoteString, kNewtWorksNewDoc	_proto: if kBuild20 then protoTxView,	viewBounds: SetBounds(0,0,0,0),	viewFlags: 0,	ReorientToScreen: if kBuild20 then ROM_DefRotateFunc,	viewSetupFormScript: func()	begin		inherited:?viewSetupFormScript();		:SetGeometry(nil, 0, 0, SetBounds(32, 32, 32, 32));	// margins		:SetStore(GetDefaultStore())						// store	end,});DefineGlobalConstant('kNewtWorksNewDoc, func(title, obj, margins, store, label)	// addNewEntryif GetRoot().(kNewtworksSym)then begin	if not margins	then margins := SetBounds(32, 32, 32, 32);	if not store	then store := GetDefaultStore();	// use a txView to properly create the SaveData info	local dummy := BuildContext(kDummyTx);	dummy:Open();	dummy:Replace({first: 0, last: 0}, obj, nil); 	local saveData := dummy:Externalize();	local summary := SubstituteChars(	// no graphics added, no need to filter		dummy:GetRangeData({first: 0, last: min(dummy:GetCountCharacters(), 80)}, 'text), cr, " "); // !!!e	dummy:Close(); 	GetRoot().(kNewtworksSym):AdoptEntryFromStationery({	// add the data to Newtworks		title: Clone(title),		saveData: saveData,		hiliteRange: {first: 0, last: 0},		margins: margins,		labels: label,		summary: summary,	// !!!e		},		'paper,		store);	end);// assume readonly (otherwise, avoid cloning)?// assume each element of path is frame or array (or test based on path1 sym/int)?DefineGlobalConstant('kSetClone, func(obj, ARRAY path, val)	// !!!abegin	if isReadonly(obj)	then obj := Clone(obj);	local nobj := obj;	local INT i, last := Length(path)-1;	foreach i,path1 in path	do nobj := nobj.(path1) := if i=last then val else Clone(nobj.(path1));	obj;end);constant kNewtSymbol := '|NewtDevEnv:TKnollSys|;constant kSlotSymbol	:= 'views;constant kViewSymbol	:= 'Sloup;constant kInstalled	:= 'installed;//constant kNewtsCapeSymbol := '|NewtsCape:NewtsCape|;	// !!!d. defined in protoAboutText//INSTALL & REMOVE scriptsInstallScript := func(partFrame)begin	local gData :=		if kBuild1x and Functions.GetGlobals exists		then GetGlobals().(kNewtSymbol)		else GetGlobalVar(kNewtSymbol);	if not gData	then begin		gData := EnsureInternal(				{constants: {}, libraries: {}, protos: {},				tools: {}, views: {}, installed: {}, });		if kBuild1x and Functions.GetGlobals exists		then GetGlobals().(EnsureInternal(kNewtSymbol)) := gData		else DefGlobalVar(EnsureInternal(kNewtSymbol), gData);		end;	gData.(kSlotSymbol).(EnsureInternal(kViewSymbol))	:= kAppSymbol;	gData.(kInstalled).(EnsureInternal(kAppSymbol))		:= kVersion;//if kDebugOn then AddDeferredCall(func() GetRoot().(kAppSymbol):?Open(), nil);end;RemoveScript := func(partFrame)begin	local gData :=		if kBuild1x and Functions.GetGlobals exists		then GetGlobals().(kNewtSymbol)		else GetGlobalVar(kNewtSymbol);	RemoveSlot(gData.(kSlotSymbol), kViewSymbol);	RemoveSlot(gData.(kInstalled), 	kAppSymbol);end;/*GetRoot().|Sloup:TKnollSys|:addFile("text/plain", "foo.dmp","Notes{labels: nil, class: 'checkList}DUMP!", nil)Package{packageName: \"StewPot:KAUi\", packageEntry: \"binary:packageEntry\"}DUMP!*/